{"name":"Play-example-mysql","tagline":"Example configuration of play framework application to use MySQL","body":"Summary\r\n=======\r\n\r\nThis project shows how to set up your Play Framework application to:\r\n\r\n  * use MySQL locally.\r\n  * deploy to CloudBees and configure to use their MySQL database.\r\n  \r\n\r\nLocal use of MySQL with Play\r\n============================\r\n\r\nHere are the steps to use MySQL locally for development of Play applications:\r\n\r\n**1. Download and install MySQL**\r\n\r\nInstall MySQL by downloading the [MySQL Community Server](http://dev.mysql.com/downloads/mysql/) following the [instructions](http://dev.mysql.com/doc/refman/5.6/en/installing.html).\r\nThis project was tested using MySQL\r\nCommunity Server 5.6.12 for Mac OS X version 10.7 (x86, 64 bit). \r\n\r\n**2. Start MySQL**\r\n\r\nThis varies depending upon the platform.  On a Mac, the installation process enables you to create\r\na preferences panel where you can start or stop your local MySQL server:\r\n\r\n![screenshot](https://raw.github.com/ics-software-engineering/play-example-mysql/master/doc/play-example-mysql-mac-prefs-panel.png)\r\n\r\n\r\n**3. Set root password**\r\n\r\nThe most important thing to do following your local installation is to immediately create a \r\npassword for the root accounts.  The following commands show one way to do it:\r\n\r\n    $ mysql -u root\r\n    mysql> select User, Host, Password from mysql.user; \r\n    mysql> update mysql.user SET Password = PASSWORD('ReplaceWithGoodPassword') WHERE User = 'root';\r\n    mysql> flush privileges;\r\n    \r\nSee the [post-installation instructions](http://dev.mysql.com/doc/refman/5.7/en/postinstallation.html)\r\nfor more information on configuring your MySQL installation. For example, you might want to drop the \"test\" database, or restrict\r\nanonymous use. \r\n\r\n**4. Create user and password environment variables**\r\n\r\nThere are at least two good reasons you shouldn't put your MySQL credentials (username and password) in your Play application.conf file\r\nif you are using a cloud-based hosting service such as GitHub:\r\n\r\n  1. Other developers working on the system will either have to define the same credentials or override yours;\r\n  2. It is just totally lame to put credentials into publicly available files hosted online.\r\n   \r\nFortunately, there is an easy solution: reference environment variables that point to \r\nthe actual credentials. To support this approach, define three environment variables with the\r\nMySQL username and password you wish to use for local Play development.  On Unix, you might edit ~/.profile to include:\r\n\r\n    export DATABASE_URL_DB=mysql://localhost/playexamplemysql?characterEncoding=UTF-8\r\n    export DATABASE_USERNAME_DB=root\r\n    export DATABASE_PASSWORD_DB=YourPasswordHere\r\n    \r\nIf you choose to create a new MySQL user rather than using the root user, then \r\nyou will need to be sure to grant that user privileges for the database\r\nmanipulated by the application. \r\n\r\n**5. Create the database to be used with your Play application**\r\n\r\nA significant difference between Play's default \"H2\" database and MySQL\r\nis that H2 will automatically create the database to be used with your Play\r\napplication, but MySQL will not. Thus, you have to manually create the MySQL database to be used\r\nwith your application.\r\n\r\nFor this example, we will call our database \"playexamplemysql\". Assuming we \r\nare using the root user for Play development, you can create it in MySQL with the following\r\n\r\n    $ mysql -u root -p\r\n    Enter password: <enter password here>\r\n    mysql> create database playexamplemysql;\r\n    Query OK, 1 row affected (0.00 sec)\r\n    mysql> exit\r\n \r\n**6. Edit Build.scala**\r\n\r\nAdd this line:\r\n\r\n    \"mysql\" % \"mysql-connector-java\" % \"5.1.21\"\r\n\r\nSee the [example Build.scala file](https://github.com/ics-software-engineering/play-example-mysql/blob/master/project/Build.scala) for details.\r\n\r\n**7. Edit application.conf**\r\n\r\nEdit four properties to reference your environment variables as follows:\r\n\r\n    db.default.driver=com.mysql.jdbc.Driver\r\n    db.default.url=\"jdbc:\"${DATABASE_URL_DB}\r\n    db.default.user=${DATABASE_USERNAME_DB}\r\n    db.default.password=${DATABASE_PASSWORD_DB}\r\n    \r\nNote that this is conveniently the exact syntax required by CloudBees, so the same lines will work\r\nfor local development and remote CloudBees deployment.\r\n\r\nTo enable the ORM to automatically create and maintain the MySQL tables and schemas associated\r\nwith your application, add the following line in the Evolutions section:\r\n\r\n    applyEvolutions.default=true\r\n\r\nFinally, to activate the Ebean ORM, uncomment the following line:\r\n\r\n    ebean.default=\"models.*\"\r\n\r\nSee the [example application.conf](https://github.com/ics-software-engineering/play-example-mysql/blob/master/conf/application.conf) to \r\nsee all these changes in context.\r\n\r\n**8. Test your local Play+MySQL installation.**\r\n\r\nAn easy way to test your local MySQL installation is to run this sample application (play-example-mysql).\r\nThis application minimally enhances the default Play application with a single entity ([PageRetrieval](https://github.com/ics-software-engineering/play-example-mysql/blob/master/app/models/PageRetrieval.java)),\r\nan instance of which is created and saved in the MySQL database each time the home page is retrieved.  The [index\r\ncontroller](https://github.com/ics-software-engineering/play-example-mysql/blob/master/app/controllers/Application.java) is modified to retrieve the total number of PageRetrieval instances from the database\r\neach time a request for the home page is received, and creates a string indicating the total in the home page.\r\n\r\nThe following screen shot illustrates the running application:\r\n\r\n![screenshot](https://raw.github.com/ics-software-engineering/play-example-mysql/master/doc/play-example-mysql-home.png)\r\n\r\nEach time you refresh the page, the number displayed will increment.\r\n\r\nTo test your MySQL installation using play-example-mysql, do the following:\r\n\r\n  * Install and run MySQL as described above. \r\n  * Define the three environment variables as specified above.\r\n  * Download the source code, cd into the directory, and invoke \"play run\". (Using the run command invokes\r\n    Play in \"development mode\", which will run evolutions to set up the appropriate tables in your MySQL database.)\r\n  * Retrieve the system in your browser at http://localhost:9000\r\n  * Refresh the page.   You should see the top line change to indicate a new number of page retrievals.\r\n  * Stop the system (control-D in the Play console). You will return to the shell.    \r\n  * Invoke \"play run\" again, and refresh the page in your browser. You should see an updated number\r\n    of page retrievals indicating that the state of the database survived a web server restart. \r\n  \r\nCloudBees deployment\r\n====================\r\n\r\nYou will normally want to do local development in Play's \"development mode\" so that Play can \r\nmanage and evolve the database schemas (table definitions) for you automatically.  That's a big win.  The major \r\nconceptual change for CloudBees deployment is that it uses Play's \"production mode\", which\r\nrequires database schemas to be managed manually. \r\n\r\nSo, to deploy your application to CloudBees, you must:\r\n\r\n  1. Create the Play application stack on CloudBees.\r\n  2. Manually create the table structure of your database.\r\n  3. Disable database evolution.\r\n  4. Deploy a distribution of the application to CloudBees.\r\n  \r\nHere's one of several possible ways to accomplish the above four steps.\r\n\r\n**1. Create the Play application stack on CloudBees.**\r\n\r\nLogin to CloudBees, and use the ClickStart mechanism to create a new default Play application.\r\nFor this example, I created a CloudBees application called \"play-mysql\".  I recommend that you \r\nkeep your CloudBees application names to 16 characters or less in order to avoid truncation. The\r\nbenefit of using ClickStart is that it automates the details of associating a MySQL database to\r\na Play application.\r\n\r\n**2. Manually create the table structure of your database.**\r\n\r\nAs part of your local development, you will have created the folder conf/evolutions/default\r\ncontaining a set of .sql files with all of the SQL commands necessary to create your \r\nMySQL database. For the play-example-mysql application, it consists of just a single table\r\ndefinition located in [1.sql](https://github.com/ics-software-engineering/play-example-mysql/blob/master/conf/evolutions/default/1.sql).\r\n\r\nHere is the table definition from that file that we need to recreate in CloudBees:\r\n\r\n    create table page_retrieval (\r\n      primary_key               bigint auto_increment not null,\r\n      timestamp                 bigint,\r\n      constraint pk_page_retrieval primary key (primary_key))\r\n    ;\r\n    \r\nTo create this table in CloudBees, you will need to login directly to the database using a MySQL\r\nclient.  On a Mac, a reasonable open source choice for the client is [Sequel Pro](http://www.sequelpro.com/).\r\nRegardless of the client you choose, you will need to obtain the database credentials from CloudBees.   Do this by installing\r\nthe [CloudBees SDK](https://wiki.cloudbees.com/bin/view/RUN/BeesSDK) and then invoking \r\n\"bees db:info -p youraccount/dbname\".  For example, here's what I get for my example application:\r\n\r\n    $ bees db:info -p philipmjohnson/play-mysql\r\n      Database name: play-mysql\r\n      Account:       philipmjohnson\r\n      Created:       Mon Jul 29 12:38:19 HST 2013\r\n      Status:        active\r\n      Master:        ec2-50-19-213-178.compute-1.amazonaws.com:3306\r\n      Port:          3306\r\n      Username:      play-mysql\r\n      Password:      a8f8notmyrealpassword132904c2f\r\n\r\nI can use the \"Master\", \"Port\", \"Username\", \"Database name\", and \"Password\" values to connect \r\nusing Sequel Pro as shown in the following screen shot:\r\n\r\n![screenshot](https://raw.github.com/ics-software-engineering/play-example-mysql/master/doc/play-example-mysql-sequel-pro.png)\r\n\r\nOnce connected, I can simply paste the page_retrieval table creation statement into the Query window\r\nand execute it to create the table. \r\n\r\nIt is interesting to note that in local development, you must create the database manually but \r\ntables are managed for you automatically, while CloudBees deployment is the opposite: it will create the database\r\nfor you automatically but requires you to manually manage the tables.\r\n\r\n**3. Disable database evolutions.**\r\n\r\nCloudBees needs you to disable evolutions on your application, even though you will want them enabled for local\r\ndevelopment.   An easy way to achieve both is to create an alternative configuration file for \r\nuse by CloudBees.  I do this by creating [application.cloudbees.conf](https://github.com/ics-software-engineering/play-example-mysql/blob/master/conf/application.cloudbees.conf)\r\nin the same directory as the application.conf file.   It is very simple:\r\n\r\n    # This is the CloudBees configuration file for the application.\r\n    # ~~~~~\r\n    \r\n    include \"application.conf\"\r\n    \r\n    # Evolutions\r\n    # ~~~~~\r\n    \r\n    # Disable evolutions when using CloudBees\r\n    evolutionplugin=disabled\r\n    applyEvolutions.default=false\r\n\r\nTo tell CloudBees to use this file instead of application.conf, execute the \"bees config:set\" \r\ncommand, supplying your account and application names and the alternative application.conf file. \r\nHere's an example invocation of this command for the play-mysql application:\r\n\r\n    $ bees config:set -a philipmjohnson/play-mysql config.resource=application.cloudbees.conf\r\n      Application config parameters for philipmjohnson/play-mysql: saved\r\n      \r\n      Application Parameters:\r\n        proxyBuffering=false\r\n        http_version=1.1\r\n        AppDynamics=false\r\n        config.resource=application.cloudbees.conf\r\n      Runtime Parameters:\r\n        java_version=1.7\r\n\r\n**4. Deploy a distribution of the application to CloudBees.**\r\n\r\n*Option 1: Manually.*  First, create a distribution zip file of your system by invoking \"play dist\". For example:\r\n\r\n    $ play dist\r\n    [info] Loading project definition from /Users/johnson/projecthosting/github/play-example-mysql/project\r\n    [info] Set current project to play-example-mysql (in build file:/Users/johnson/projecthosting/github/play-example-mysql/)\r\n    [info] Wrote /Users/johnson/projecthosting/github/play-example-mysql/target/scala-2.10/play-example-mysql_2.10-1.0-SNAPSHOT.pom\r\n    \r\n    Your application is ready in /Users/johnson/projecthosting/github/play-example-mysql/dist/play-example-mysql-1.0-SNAPSHOT.zip\r\n    \r\n    [success] Total time: 2 s, completed Jul 30, 2013 7:42:37 PM\r\n\r\nNext, send that distribution file to CloudBees using the \"bees app:deploy\" command. For example:\r\n\r\n    $ bees app:deploy -a philipmjohnson/play-mysql -t play2 dist/play-example-mysql-1.0-SNAPSHOT.zip\r\n      Deploying application philipmjohnson/play-mysql (environment: ): dist/play-example-mysql-1.0-SNAPSHOT.zip\r\n      Application parameters: {containerType=play2}\r\n      ........................uploaded 25%\r\n      ........................uploaded 50%\r\n      ........................uploaded 75%\r\n      ........................upload completed\r\n      deploying application to server(s)...\r\n      Application philipmjohnson/play-mysql deployed: http://play-mysql.philipmjohnson.cloudbees.net\r\n\r\nNow you should be able to retrieve the application at the URL above:\r\n\r\n![screenshot](https://raw.github.com/ics-software-engineering/play-example-mysql/master/doc/play-example-mysql-cloudbees.png)\r\n\r\nYou can refresh this page and see that the counter is updated. \r\n\r\n*Option 2: Continuous Integration.*  Another second approach is to automate the deployment of your \r\napplication by triggering a build and deployment each time you commit.  To see how to do that, \r\nlook at the [play-example-continuous-integration](http://ics-software-engineering.github.io/play-example-continuous-integration/)\r\nproject.\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n  \r\n \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}